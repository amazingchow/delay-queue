// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TaskDelayQueueServiceClient is the client API for TaskDelayQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskDelayQueueServiceClient interface {
	Push(ctx context.Context, in *PushTaskRequest, opts ...grpc.CallOption) (*PushTaskResponse, error)
	Finish(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*FinishTaskResponse, error)
	Exist(ctx context.Context, in *CheckTaskRequest, opts ...grpc.CallOption) (*CheckTaskResponse, error)
}

type taskDelayQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskDelayQueueServiceClient(cc grpc.ClientConnInterface) TaskDelayQueueServiceClient {
	return &taskDelayQueueServiceClient{cc}
}

func (c *taskDelayQueueServiceClient) Push(ctx context.Context, in *PushTaskRequest, opts ...grpc.CallOption) (*PushTaskResponse, error) {
	out := new(PushTaskResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_delay_queue.TaskDelayQueueService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskDelayQueueServiceClient) Finish(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*FinishTaskResponse, error) {
	out := new(FinishTaskResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_delay_queue.TaskDelayQueueService/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskDelayQueueServiceClient) Exist(ctx context.Context, in *CheckTaskRequest, opts ...grpc.CallOption) (*CheckTaskResponse, error) {
	out := new(CheckTaskResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_delay_queue.TaskDelayQueueService/Exist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskDelayQueueServiceServer is the server API for TaskDelayQueueService service.
// All implementations must embed UnimplementedTaskDelayQueueServiceServer
// for forward compatibility
type TaskDelayQueueServiceServer interface {
	Push(context.Context, *PushTaskRequest) (*PushTaskResponse, error)
	Finish(context.Context, *FinishTaskRequest) (*FinishTaskResponse, error)
	Exist(context.Context, *CheckTaskRequest) (*CheckTaskResponse, error)
	mustEmbedUnimplementedTaskDelayQueueServiceServer()
}

// UnimplementedTaskDelayQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskDelayQueueServiceServer struct {
}

func (UnimplementedTaskDelayQueueServiceServer) Push(context.Context, *PushTaskRequest) (*PushTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedTaskDelayQueueServiceServer) Finish(context.Context, *FinishTaskRequest) (*FinishTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}
func (UnimplementedTaskDelayQueueServiceServer) Exist(context.Context, *CheckTaskRequest) (*CheckTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (UnimplementedTaskDelayQueueServiceServer) mustEmbedUnimplementedTaskDelayQueueServiceServer() {}

// UnsafeTaskDelayQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskDelayQueueServiceServer will
// result in compilation errors.
type UnsafeTaskDelayQueueServiceServer interface {
	mustEmbedUnimplementedTaskDelayQueueServiceServer()
}

func RegisterTaskDelayQueueServiceServer(s grpc.ServiceRegistrar, srv TaskDelayQueueServiceServer) {
	s.RegisterService(&_TaskDelayQueueService_serviceDesc, srv)
}

func _TaskDelayQueueService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskDelayQueueServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_delay_queue.TaskDelayQueueService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskDelayQueueServiceServer).Push(ctx, req.(*PushTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskDelayQueueService_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskDelayQueueServiceServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_delay_queue.TaskDelayQueueService/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskDelayQueueServiceServer).Finish(ctx, req.(*FinishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskDelayQueueService_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskDelayQueueServiceServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_delay_queue.TaskDelayQueueService/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskDelayQueueServiceServer).Exist(ctx, req.(*CheckTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskDelayQueueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "amazingchow.photon_dance_delay_queue.TaskDelayQueueService",
	HandlerType: (*TaskDelayQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _TaskDelayQueueService_Push_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _TaskDelayQueueService_Finish_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _TaskDelayQueueService_Exist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/amazingchow/photon-dance-delay-queue/pb/task-delay-queue-service.proto",
}
